fix(optim.phylo.ls)
ls.fit<-optim.phylo.ls(D,phangorn::NJ(D), collapse = FALSE)
Rprof(tmp <- tempfile(), memory.profiling = TRUE)
nnls.fit<-optim.phylo.nnls(D,NJ(D), collapse = FALSE)
bestRprof()
summaryRprof(tmp, memory = "both")
unlink(tmp)
fix(optim.phylo.nnls)
Rprof(tmp <- tempfile(), memory.profiling = TRUE)
nnls.fit<-optim.phylo.nnls(D,NJ(D), collapse = FALSE)
bestRprof()
summaryRprof(tmp, memory = "both")
unlink(tmp)
Rprof()
summaryRprof(tmp, memory = "both")
Rprof(tmp <- tempfile(), memory.profiling = TRUE)
nnls.fit<-optim.phylo.nnls(D,NJ(D), collapse = FALSE)
Rprof()
summaryRprof(tmp, memory = "both")
unlink(tmp)
?dfactorial
dfactorial(10)
dfactorial(11)
dfactorial(101)
dfactorial(1001)
ldfactorial(1001)
ldfactorial(10001)
ldfactorial(20001)
ldfactorial(200001)
ldfactorial(200000)
ldfactorial(200001)
ldfactorial(20001)
ldfactorial(2001)
ldfactorial(21)
ldfactorial(201)
ldfactorial(2001)
ldfactorial(21)
dfactorial(21)
exp(ldfactorial(21))
fix(optim.phylo.nnls)
ls.tree
RSS
D
tree
ls()
nnls.fit
RSS <- function (tree, D)
{
D <-  as.matrix(D)
X <- phyloDesign(tree)
D <- D[tree$tip.label, tree$tip.label]
colD <- D[lower.tri(D)]
d <- X %*% tree$edge.length
sum((colD - d)^2)
}
class(D)
RSS(nnls.fit, D)
RSS(ls.fit, D)
plot(ls.fit)
plot(nnls.fit)
ls.tree
ls.fit$tree
ls.fit
ls.fit$edge.length
RSS(ls.fit, D)
RSS(nnls.fit, D)
optim.phylo.nnls <- function (D, stree = NULL, set.neg.to.zero = TRUE, fixed = FALSE,
tol = 1e-10, collapse = TRUE)
{
if (class(D) == "dist")
D <- as.matrix(D)
n <- nrow(D)
if (is.null(stree))
stree <- rtree(n = n, tip.label = rownames(D), br = NULL,
rooted = F)
else if (!inherits(stree, "phylo")) {
cat("starting tree must be an object of class \"phylo.\" using random starting tree.\n")
stree <- rtree(n = n, tip.label = rownames(D), br = NULL,
rooted = F)
}
if (!is.binary.tree(stree))
stree <- multi2di(stree)
if (is.rooted(stree))
stree <- unroot(stree)
best.tree <- nnls.phylo(stree, D)
Q <- attr(best.tree, "RSS")
bestQ <- 0
Nnni <- 0
while (bestQ - Q < tol && fixed == FALSE) {
nni.trees <- lapply(nni(best.tree), nnls.phylo, dm = D)
nniQ <- sapply(nni.trees, function(x) attr(x, "RSS"))
ii <- which(nniQ == min(nniQ))
bestQ <- nniQ[ii]
if (bestQ < Q) {
best.tree <- nni.trees[[ii]]
Nnni <- Nnni + 1
Q <- attr(best.tree, "RSS")
cat(paste(Nnni, "set(s) of nearest neighbor interchanges. best Q so far =",
round(Q, 10), "\n", collapse = ""))
flush.console()
}
else bestQ <- Inf
}
cat(paste("best Q score of", round(Q, 10), "found after",
Nnni, "nearest neighbor interchange(s).\n", collapse = ""))
if (set.neg.to.zero)
best.tree$edge.length[best.tree$edge.length < 0] <- 0
attr(best.tree, "Q-score") <- Q
attr(best.tree, "RSS") <- Q
if (collapse)
best.tree <- di2multi(best.tree)
best.tree
}
RSS <- function (tree, D)
{
D <-  as.matrix(D)
X <- phyloDesign(tree)
D <- D[tree$tip.label, tree$tip.label]
colD <- D[lower.tri(D)]
d <- X %*% tree$edge.length
sum((colD - d)^2)
}
devtools::install_github("KlausVigo/phangorn")
library(phangorn)
library(phangorn)
devtools::install_github("KlausVigo/phangorn")
library(phangorn)
library(phangorn)
ls()
rm(pml.fit())
rm(pml.fit)
devtools::install_github("KlausVigo/phangorn")
library(phangorn)
devtools::install_github("KlausVigo/phangorn")
library(phangorn)
library(phytools)
dna<-read.nexus.data(file="http://www.phytools.org/UMB2015/data/Jackman-etal.nex")
dna<-as.DNAbin(dna)
dna
D<-dist.dna(dna)
rm(optim.phylo.ls)
Rprof(tmp <- tempfile(), memory.profiling = TRUE)
ls.fit<-optim.phylo.ls(D,NJ(D), collapse = FALSE)
Rprof()
summaryRprof(tmp, memory = "both")
unlink(tmp)
Rprof(tmp <- tempfile(), memory.profiling = TRUE)
nnls.fit<-optim.phylo.nnls(D,NJ(D), collapse = FALSE)
Rprof()
summaryRprof(tmp, memory = "both")
unlink(tmp)
RSS(nnls.fit, D)
RSS(ls.fit, D)
system.time(library(phangorn)
data(Laurasiatherian)
mT <- modelTest(Laurasiatherian))
system.time(library(phangorn);
data(Laurasiatherian);
mT <- modelTest(Laurasiatherian))
library(phangorn)
data(Laurasiatherian)
mT <- modelTest(Laurasiatherian)
mT
args(optim.pml)
fix(optim.pml)
args(bootrstrap.pml)
args(bootstrap.pml)
data("Laurasiatherian")
Laurasiatherian
dm <- dist.ml(Laurasiatherian)
tree <- fastme.bal(dm)
obj <- pml(tree, Laurasiatherian)
obj
fit.gtr <- update(obj, k=4)
fit.gtr <- optim.pml(fit.gtr, optNni=TRUE, optGamma=TRUE, optInv=TRUE,
model="GTR", control=pml.control(trace=0))
fit.gtr
bstrees <- bootstrap.pml(fit.gtr, bs=5, optNni=TRUE)
consensusNet(bstrees)
densiTree(bstrees)
args(densiTree)
bstrees2 = lapply(bstree, unroot)
bstrees2 = lapply(bstrees, unroot)
consensusNet(bstrees)
densiTree(bstrees2)
class(bstrees2) = "multiPhylo"
consensusNet(bstrees)
densiTree(bstrees2)
densiTree(bstrees2)
traceback()
fix(densiTree)
densiTree(bstrees2)
consensus
ls()
x
superTree(bstrees2)
mrp.supertree(bstrees2)
fix(superTree)
args(pratchet)
?pratchet
x = list(c(1,2), c(1,2,3), c(2,3), c(1,2))
x
unique(x)
duplicated(x)
bstrees
prop.part(trees[[i]])
prop.part(bstrees[[i]])
prop.part(bstrees[[1]])
prop.part(bstrees[1:3])
phangorn:::bip(tree)
phangorn:::bipart(tree)
phangorn:::bip(tree)
phangorn:::bipart(tree)
system.time(phangorn:::bipart(tree))
system.time(phangorn:::bipart(tree))
system.time(for(i in 1:5)phangorn:::bipart(tree))
system.time(for(i in 1:100)phangorn:::bipart(tree))
system.time(for(i in 1:100)phangorn:::bipart(bstrees))
system.time(for(i in 1:100)phangorn:::bipart(bstrees[[1]]))
system.time(for(i in 1:100)prop.part(bstrees[[1]]))
system.time(for(i in 1:100)prop.part(bstrees[[1]]))
system.time(for(i in 1:100)prop.part(bstrees[1:5]))
system.time(for(i in 1:1)phangorn:::bipart(bstrees[[1]]))
system.time(for(i in 1:1)phangorn:::bipartition(bstrees[[1]]))
system.time(for(i in 1:100)phangorn:::bipartition(bstrees[[1]]))
phangorn:::bip(tree)
phangorn:::bipart(tree)
system.time(for(i in 1:1)phangorn:::bipart(bstrees[[1]]))
system.time(for(i in 1:100)phangorn:::bipart(bstrees[[1]]))
system.time(for(i in 1:100)phangorn:::bip(bstrees[[1]]))
system.time(for(i in 1:100)phangorn:::bip(bstrees[[1]]))
system.time(for(i in 1:100)phangorn:::bip(bstrees[[1]]))
system.time(for(i in 1:1000)phangorn:::bip(bstrees[[1]]))
system.time(for(i in 1:1000)phangorn:::bip(bstrees[[1]]))
system.time(for(i in 1:1000)phangorn:::bipart(bstrees[[1]]))
library(phangorn)
bstrees
superTree(bstrees)
superTree(bstrees)
superTree(bstrees)
fix(superTree)
library(phangorn)
superTree(bstrees)
densiTree(bstrees)
rm(densiTree)
densiTree(bstrees)
densiTree(bstrees, "p")
densiTree(bstrees, type="p")
densiTree(bstrees, type="p")
densiTree(bstrees, type="p")
densiTree(bstrees, type="p")
densiTree(bstrees, type="c")
densiTree(bstrees)
densiTree(bstrees, type="phylogram")
densiTree(bstrees, type="c")
fix(plot.phylo())
fix(plot.phylo)
library(phangorn)
densiTree(bstrees, type="c")
densiTree(bstrees, type="f")
densiTree(bstrees, type="p")
?match.arg
ls()
fit.gtr
baseFreq(Laurasiatherian)
args(baseFreq)
fix(baseFreq)
base.freq(as.DNAbin(Laurasiatherian))
X = as.character(Laurasiatherian)
X[1,1]
X[1,1] = "?"
base.freq(as.DNAbin(X))
sum(base.freq(as.DNAbin(X)))
sum(baseFreq(phyDat(X)))
(baseFreq(phyDat(X)))
baseFreq
fix(base.freq)
base.freq(as.DNAbin(X), all=TRUE)
(baseFreq(phyDat(X)))
fix(baseFreq)
base.freq(as.DNAbin(X), all=TRUE)[1:4]
base.freq(as.DNAbin(X), all=TRUE)[1:4] / base.freq(as.DNAbin(X))
base.freq(as.DNAbin(X), freq=TRUE, all=TRUE)
base.freq(as.DNAbin(X), freq=TRUE)
fix(baseFreq)
attr(Laurasiatherian, "levels")
fix(baseFreq)
fit.gtr
base.freq(as.DNAbin(X))
?pml
base.freq(as.DNAbin(X))
baseFreq <- function(obj, freq=FALSE, all=FALSE, drop.unused.levels = FALSE){
if (class(obj) != "phyDat")
stop("data must be of class phyDat")
labels <- attr(obj, "allLevels")
weight <- attr(obj,"weight")
n <- length(obj)
res <- numeric(length(labels))
D = diag(length(labels))
for(i in 1:n)res <- res + colSums(D[obj[[i]],, drop=FALSE]*weight)
names(res) <- labels
if(!all) res <- res[attr(obj, "levels")]
if(!freq)res <- res/sum(res)
if(drop.unused.levels) return(res[res>0])
res
}
base.freq(as.DNAbin(X))
baseFreq(phyDat(X))
system.time(baseFreq(phyDat(X)))
system.time(baseFreq(phyDat(X)))
system.timebase.freq(as.DNAbin(X)))
system.time(base.freq(as.DNAbin(X)))
?base.freq
?"phyDat"
model="JC"
bf = NULL
if(is.null(bf) && model="F81") bf <- baseFreq(x)
if(is.null(bf) && model=="F81") bf <- baseFreq(x)
bf
model="F81"
if(is.null(bf) && model=="F81") bf <- baseFreq(x)
x
x = Laurasiatherian
if(is.null(bf) && model=="F81") bf <- baseFreq(x)
bf
?dist.ml
library(phangorn)
library(phangorn)
install.packages(c("adabag", "caret", "ks", "lme4", "networkDynamic", "randomForest", "rgl", "rmarkdown", "RNeXML", "rootSolve", "RUnit", "snowfall", "spam", "taxize", "testthat", "treebase", "TreeSim"))
library(vegan)
treedist
?treedist
library(phangorn)
baseFreq
?dist.ml
data(Laurasiatherian)
dm1  = dist.ml(Laurasiatherian)
dmJC  = dist.ml(Laurasiatherian)
dmF81  = dist.ml(Laurasiatherian, "F81")
fit = pml(tree, Laurasiatherian, k=4)
fit
fit = optim.pml(fit, TRUE, model="F81", optGamma=TRUE)
fit
dmF81G  = dist.ml(Laurasiatherian, "F81", k=4, shape=.4)
dmJCG  = dist.ml(Laurasiatherian, k=4, shape=.4)
treeJC = fastme.bal(dmJC)
treeJCG = fastme.bal(dmJCG)
treeF81G = fastme.bal(dmF81G)
treeF81 = fastme.bal(dmF81)
pml(treeJC, Laurasiatherian)
pml(treeJC, Laurasiatherian)$logLik
pml(treeJCG, Laurasiatherian)$logLik
pml(treeF81, Laurasiatherian)$logLik
pml(treeF81G, Laurasiatherian)$logLik
cor(dmJC, dmJCG)
cor(dmJC, dmF81)
cor(dmJC, dmF81G)
cor(dmJCG, dmF81G)
data(Laurasiatherian)
dm1 <- dist.hamming(Laurasiatherian)
tree1 <- NJ(dm1)
dm2 <- dist.logDet(Laurasiatherian)
tree2 <- NJ(dm2)
treedist(tree1,tree2)
dm3 <- dist.ml(Laurasiatherian, model="F81", k=4, shape=.4)
tree3 <- NJ(dm3)
treedist(tree1,tree3)
pml(tree3, Laurasiatherian)
pml(tree, Laurasiatherian)
pml(tree1, Laurasiatherian)
?mclapply
library(parallel)
?mclapply
fix(mclapply)
.check_ncores()
library(phangorn)
example(pratchet)
example(bab)
data(yeast)
gene12 <- subset(yeast, , 1:3158, site.pattern=FALSE)
trees <- bab(gene12)
trees <- bab(yeast)
fix(pratchet)
args(pratchet)
fix(pratchet)
library(phangorn)
require("parallel")
require(parallel)
print(require(parallel))
print(require("parallel""))
)
)
print(require("parallel"))
example(consensusNet)
bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=FALSE)
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=FALSE))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=FALSE))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE, mc.cores=1))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE, mc.cores=2))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE, mc.cores=3))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE, mc.cores=4))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE, mc.cores=6))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE, mc.cores=4))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE, mc.cores=8))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), multicore=TRUE, mc.cores=7))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=7))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=8))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=8))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=4))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=4))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=7))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=7))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=1L))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=2L))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=3L))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=4L))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=5L))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=6L))
system.time(bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), bs=1000, multicore=TRUE, mc.cores=8L))
library(phangorn)
library(phangorn)
pratchet(Laurasiatherian)
args(pratchet)
fix(pratchet)
pratchet(Laurasiatherian)
method
bootstrap.phyDat(data, FUN, tree = tree, bs = 1, trace = trace, method=method, rearrangements=rearrangements)
bootstrap.phyDat(data, FUN, tree = tree, bs = 1, trace = trace, method=method, rearrangements=rearrangements)
method
bootstrap.phyDat(Laurasiatherian, FUN, tree = tree, bs = 1, trace = trace, method=method, rearrangements=rearrangements)
bootstrap.phyDat(Laurasiatherian, FUN, tree = tree, bs = 1, trace = trace, method="fitch", rearrangements=rearrangements)
optim.parsimony(tree, data = data, method=method, rearrangements=rearrangements)
args(bootstrap.phyDat)
bootstrap.phyDat(data, FUN, tree = tree, bs = 1, trace = trace, method=method, rearrangements=rearrangements, ...)
bootstrap.phyDat(data, FUN, tree = tree, bs = 1, method=method, rearrangements=rearrangements, ...)
bootstrap.phyDat(data, FUN, tree = tree, bs = 1, method="fitch", rearrangements=rearrangements, ...)
args(bootstrap.phyDat)
bootstrap.phyDat(data, FUN, , bs=1, tree = tree, method="fitch", rearrangements=rearrangements, ...)
bootstrap.phyDat(data, FUN, , bs=1, tree = tree, method="fitch", rearrangements=rearrangements)
bootstrap.phyDat(data, FUN, , bs=1, tree = tree)
FUN = function(data, tree, method, rearrangements, ...)
optim.parsimony(tree, data = data)
bootstrap.phyDat(data, FUN, , bs=1, tree = tree)
tree
bootstrap.phyDat(data, FUN, bs=1, tree = tree, data=data)
bootstrap.phyDat(data, FUN, bs=1, tree = tree)
traceback()
bootstrap.phyDat
bootstrap.phyDat(data, pratchet, bs=1)
traceback()
View(uniquetree)
View(FUN)
library(phangorn)
dist.phyDat <-  function(x, ...){}
?dist.hamming
?dist.p
?dist.hamming
dist.phyDat <-  function(x, model="", ...){}
args(dist.dna)
dist.phyDat <-  function(x, model="", ...){}
?dist.p
?AIC
?AICc
?AIC
?ace
howmanytrees()
howmanytrees(4)
?rgamma
?GammaDist
?discrete.gamma
?dist.topo
library(paleotree)
dist.nodes
?dist.nodes
library(phangorn)
?as.MultipleAlignment
?phyDat2MultipleAlignment
MultipleAlignment2phyDat
logLik
logLik.phyDat
library(phangorn)
library(phangorn)
args(pml.fit)
fix(pml.fit)
library(phangorn)
install.packages(c("corHMM", "dendextend", "geomorph", "matrixStats", "mclust", "multicool", "RcppArmadillo", "roxygen2", "snow", "spam", "TESS", "VGAM"))
install.packages("ips")
library(phangorn)
library(ips)
library(coda)
Jackman <- read.phyDat("http://www.phytools.org/UMB2015/data/Jackman-etal.nex", format="nexus")
baseFreq(Jackman, all=TRUE)
X <- as.character(Jackman)
X[X=="?"] <- "n"
X <- as.DNAbin(X)
bayes.tree <- mrbayes(X, file = "Jackman.nex", ngen = 6e+05, printfreq = 1000, samplefreq = 100, run = TRUE)
trees.run1 <- read.nexus("Jackman.nex.run1.t")
trees.run2 <- read.nexus("Jackman.nex.run2.t")
library(coda)
?coda
library(help=coda)
?autocorr
library(phangprn)
library(phangorn)
tree = rtree(10)
x = paste("qwerqw", 1:10, sep="_")
x
strsplit(x, "_")
?library(help="phangorn")
library(help="phangorn")
